

mainWindow = 0;
invWindow = 1;
menuWindow = 2;

//Constants for messaging the user
msgRoomChange = 5000;

directionIds = [&northTo,&neTo,&eastTo,&seTo,&southTo,&swTo,&westTo,&nwTo,&upTo,&downTo,&inTo,&outTo]; 
directionNames = ["north","northeast","east","southeast","south","southwest","west","northwest","up","down","in","out"]; 

actionIds = [&examine,&push];
actionNames = ["examine","push"];

CGameObj has parent = 0, child = 0, sibling = 0, shortName,  initial, moved, click, 
take {
	oldParent = self.parent;
	purge click, self; 
	"\n\nI picked up the " + makeHot(name,&click,self) + ". ";
	move self to player;
	moved = true;
	updateInventory();
	oldParent.taken();
}, 
drop {
	purge click, self;
	"\n\nI dropped the " + makeHot(name,&click,self) + ". ";
	move self to player.parent;
	updateInventory();
}, examine {
	openWindow self;
	setWindow(self);
	print style("popHeader") + cap(name) + style("popBody") + "\n";
	description();
	setWindow(mainWindow);
},
click {
	//tell ui to open a menu window
	openWindow(menuWindow);
	setWindow(menuWindow);
	if (self has &take && self not in player && !self inherits CScenery)
			print makeHot("Take",&take,self) + "\n";
	if (self has &drop && self is in player)
			print makeHot("Drop",&drop,self) + "\n";
	
	//iterate through possible actions 
	count = 0;
	for each actionId in actionIds {
		if (self has actionId) {
			if (count > 0)
				"\n";
			print makeHot(cap(actionNames[count]),actionId,self) ;

		}
		count += 1;
		
	}
	setWindow(mainWindow);
	
};

updateInventory() {
	setWindow(invWindow);
	clearWindow;
	"Inventory:";
	for each possession of player {
		print makeHot("\nA " + possession.name,&click,possession); 
	}
	setWindow(mainWindow);
};


calcBackDirection(direction) {
	index = 0; dirNo = 12;
	for each dir in directionIds {
		if (dir == direction)
			dirNo = index;
		index += 1;
	}
	if (dirNo < 8) {
		dirNo += 4;
		dirNo = dirNo % 8;
		return directionIds[dirNo];
	} else {
		if (dirNo == 8) return directionIds[9];
		if (dirNo == 9) return directionIds[8];
		if (dirNo == 10) return directionIds[11];
		if (dirNo == 11) return directionIds[10];
	}
};



listChildren(parentObj) {
	count = 0; result = "";
	numChildren = children(parentObj); 
	for each x of parentObj { 
		result += " a " + makeHot(x.name,&click,x); 
		count += 1;
		if (count < numChildren -2) //probably needs to be -1
			result = result + ",";
		if (count == numChildren -1)
			result = result + " and";
	}
	return result;
};


listElements(array) {
	count = 0; result = "";
	for each x in array { 
		result += " a " + makeHot(x.name,&click,x); 
		count += 1;
		if (count < array -1)
			result = result + ",";
		if (count == array -1)
			result = result + " and";
	}
	return result;
};


/** Initialisation code.*/
init() {
	//start player in the right room:
	move player to foyer;
};



CGameObj CRoom has 
registerHotText {
	x = 0; //local 0
	for each directionId in directionIds { 
		if (self.<directionId>)  {
			hot directionNames[x], directionId, self;
		}
		x += 1;
	}

	//register hot text for any room objects
	for each item of self {  
			hot item.name, &click, item;
	}

},
listUndescribedExits() {
	directionNum = 0; backDirectionUsed = -1;
	//TO DO: psuedorandomly turn off backDirection, it's too prevalent
	for each directionId in directionIds {
		destination = self.<directionId>;
		if (destination != nothing &&  !hot directionNames[directionNum] used) {
			if (directionId == player.backDirection) {
				backDirectionUsed = directionNum;
			}
			else {
				if (destination inherits CCorridor)
					corridorList[] = directionNum;
				else 
					exitList[] = directionNum;	
			}
		} 
		directionNum += 1;
	}
	
	//corridors
	if (corridorList == 1) {
		"A corridor led " + directionNames[corridorList[0]];
	}
	else if (corridorList > 1) {
		"Corridors led "; count = 0;
		for each corridorDir in corridorList {
			print directionNames[corridorDir];
			count += 1;
			if (count < corridorList -1)
				", ";
			if (count == corridorList -1)
				" and ";	
		}
		
	}

	//exits
	if (exitList == 1) {
		". A doorway led " + directionNames[exitList[0]];
	}
	else if (exitList > 1) {
		"Doorways led "; count = 0;
		for each exitDir in exitList {
			print directionNames[exitDir];
			count += 1;
			if (count < exitList -1)
				", ";
			if (count == exitList -1)
				" and ";	
		}

	}
	
	if (backDirectionUsed > -1) {
		if (exitList > 0 || corridorList > 0)
			", or I could go back "  + directionNames[backDirectionUsed];
		else
			"The way back led "  + directionNames[backDirectionUsed];
	}
	print ". ";	
},
listObjects() {
	//provide any initial descriptions
	for each item of self {
		if (item != player && !item inherits CScenery) {
			if (!item.moved)
				"\n\n" + item.initial();
			else
				movedItems[] = item;	
		}		
	}
	
	//describe any other objects
	if (movedItems > 0)
		"\n\nI could also see " + listElements(movedItems) + " here. ";
	
},
look {
	registerHotText();
	description(); //TO DO: should really be called describe.
	listUndescribedExits();
	listObjects();

	
	hot clear;
},northTo,neTo,eastTo,seTo,southTo,swTo,westTo,nwTo,upTo,downTo,inTo,outTo;





CRoom CCorridor has shortName "corridor";
CGameObj CStaticObj;
CStaticObj CScenery;

CSupporter has search {
	result = listChildren(self);
	if (result != "") {
		setWindow(self);
		"On it I could see" + result + ".";
		setWindow(mainWindow);
	}
},
examine {
	return CGameObj::examine() + search();
},
taken {
	setWindow(self);
	clearWindow;
	examine();
	setWindow(mainWindow);
};



CGameObj player has onObject, backDirection,
moveTo (direction) {
	
	newRoom = parent.<direction>;

	move self to newRoom;
	
	backDirection = calcBackDirection(direction);
	
	setWindow(mainWindow);
	purge all;
	"\n\n";
	message msgRoomChange, newRoom;
	newRoom.look();
	
	
};




CRoom foyer has name "foyer",  description = { 
"I was in what had once been a luxurious reception area. Algae encrusted the windows, admitting 
only a thin trickle of light. It fell on mouldering couches, plastic tables and an imposing reception
desk. Swathes of 
dust-choked cobweb hung from the ceiling like grey,
motheaten banners. It didn't look as if the place had been abandoned for years: 
it looked more like centuries. "; 
}, 	
northTo = broadCorridor;

-> CGameObj box has name "pale plastic box", initial "A pale plastic box lay discarded here.",
description "It wasn't really any kind of colour, just pale.";
-> CGameObj box2 has name "dark plastic box", initial "Someone had left a dark plastic box here.",
description "Made from a dull, black-but-not-really-black plastic.";
-> CGameObj fromitz has name "fromitz board", initial "An old fromitz board gathered dust on the floor.",
description "It looked like every other fromitz board I'd ever seen.";

-> CScenery  CSupporter desk has name "reception desk", pushed = 0, initial { text = "A formidable reception desk stretched
almost the length of the room. ";
if (pushed == 1)
	text = text + " It had recently been pushed.";
return text;
}
,  description "An imposing block of moulded plastic, now as 
dusty as everything else.", 
push {  
	pushed = 1;
	"\n\nStraining my back, I managed to push the desk a few centimetres.";
	
};

-> -> CGameObj doll has name "Russian doll", initial "Somewhat incongrously, a painted Russian doll sat on the floor.",
description "Carved from wood and painted in bright, patterned colours.";
-> -> CGameObj bug has name "tiny microphone", description "About the size of my littlest thumb-nail.";



CCorridor broadCorridor has name "broad corridor", description "As I ventured into the corridor, Max obligingly shone a
torch light ahead of me. It showed what once would have been a spacious and stylish hallway, with artfully 
curving walls and an orange carpet. Whole civilisations of mould had spawned in that carpet and 
passed away since it had last seen use. Darkness closed in all around me until I might as well have
been exploring a cave. The hallway wound deeper into the building to the north, and back the way I
had come to the south.",
shortName "broad corridor",
northTo = octHall, southTo = foyer;


playerObj = player;

CRoom octHall has description = "I came to a large, octagonal hall, as dead and dusty as
everywhere else. An imposingly large door blocked the way north.",
westTo = westPassage, neTo = nePassage, southTo = broadCorridor;

CCorridor westPassage has description = "I ventured down the east-west passageway. Max's torchlight afforded 
me little glimpses of decayed surfaces.",
westTo pipeRoom, eastTo octHall;

CRoom pipeRoom has description = "I emerged in a room as large as any I had seen so far. It
was dominated by inumerable outsized pipes, emerging from the shadows, walls, floor and ceiling to converge
in a major piece of machinery in the centre of the room. Whatever purpose it had once served, it was
lifeless now.",
eastTo westPassage;

CCorridor nePassage has description = "I ventured down the passageway... I could go northeast or southwest.",
swTo octHall, neTo junction;

CRoom junction has description = "I found myself at the end of the passage.",
westTo turbineHall, eastTo maintenance, swTo nePassage;

CRoom turbineHall has description {
"I found myself at the bottom of a vertical chamber that must have filled most of the remaining space
in the building. Enormous cyclindrical machines rose into the dark, towering over me and the rusty metal crates that lay
discarded here. A network of pipes snaked among the spaces in between them, as
did a maintenance catwalk. ";},
eastTo junction;


-> CScenery catwalk has name "maintenance catwalk", description "Too high to reach, it led off tantalisingly
into the dark.",
climb {
	if (player.onObject != crate) {
		"\n\nThe catwalk was too high to reach.";
	}
	if (player.onObject == crate) {
		if (crate.pushed == true) {
			player.onObject = nothing;
			"\n\nStanding on the crate, I was able to climb onto the catwalk.";
		} else { 
			"\n\nAlthough I was higher, the crate was nowhere near the catwalk.";
		}
	}
};

-> CScenery crate has name "crates", pushed = false, description {
	result = "Nearly as big as me, but empty. ";
	if (pushed == false)
		result += "I could just about move one or two of them if I put my back into it.";
	else 
		result += "I'd managed to push one under the catwalk.";
	return result;
},
climb {  
	if (player.onObject == self) {
		player.onObject = nothing;
		"\n\nI climbed off the crate.";
	} else {
		player.onObject = self;
		"\n\nI climbed onto one of the crates.";
	}
},
push {
	if (pushed == false) {
		if (player.onObject == self) {
			"\n\nThat was never going to happen while I was standing on it.";
			return;
		}
		pushed = true;
		"\n\nWith a lot of swearing, I pushed one of the crates under the catwalk.";
	} else { 
		 "\n\nThere was no point pushing the crate any further.";
	}
	
};

CRoom maintenance has description = "The maintenance room was full of old, corroded machinery and 
rusty tools.",
westTo junction;




